buildscript {

    ext.asm_lib_version = '1.0.0'

    ext.kotlin_version = '1.7.10'

    ext.repoPath = rootProject.file('repos').absolutePath
    println("ext.repoPath: ${rootProject.ext.repoPath}")

    ext.hasPluginLib = rootProject.file('repos/io/github/xander/plugin-library/maven-metadata.xml').exists()
    ext.hasPlugin = rootProject.file('repos/io/github/xander/plugin-asm/maven-metadata.xml').exists()

    // 用来控制 plugin 项目时否依赖本地的项目
    ext.inSourceCodeMode = true

    // 是否使用插件，可以手动打开
    ext.usePlugin = ext.hasPlugin && ext.hasPluginLib && true
    println("ext.usePlugin: ${rootProject.ext.usePlugin}")

    repositories {
        maven { url uri("${rootProject.ext.repoPath}") }
        maven { url "https://maven.aliyun.com/repository/jcenter" }
        maven { url "https://maven.aliyun.com/repository/google" }
        mavenCentral()
        google()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:7.0.4'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${rootProject.ext.kotlin_version}"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files

        if (rootProject.ext.usePlugin) {
            //格式为 --> group:module:version
            classpath "io.github.xander:plugin-asm:${rootProject.ext.asm_lib_version}"
        }
    }
}

def isWindows() {
    def os_name = System.properties['os.name'].toString().toLowerCase()
    println "os name: ${os_name}"
    return os_name.contains('window')
}

allprojects {
    println "enter ${project.name}"
    repositories {
        maven { url uri("${rootProject.ext.repoPath}") }
        maven { url "https://maven.aliyun.com/repository/jcenter" }
        maven { url "https://maven.aliyun.com/repository/google" }
        mavenCentral()
        google()
    }
    // add dependency substitution rules
    configurations.all {
        resolutionStrategy {
            dependencySubstitution {
                /* DependencySubstitution dependency -> */
                // Substitute project and module dependencies
                if (rootProject.ext.inSourceCodeMode) {
                    substitute module('io.github.xander:dev-tool') with project(':dev-tool-library')
                    substitute module('io.github.xander:plugin-asm') with project(':asm-plugin')
                    substitute module('io.github.xander:plugin-library') with project(':asm-plugin-library')
                }
            }
            // eachDependency { DependencyResolveDetails details ->
            //     println "${project.name} ------ ${details.getRequested()}"
            // }
        }
    }

    println "exit ${project.name}"
}

task clean(type: Delete) {
    delete rootProject.buildDir
}